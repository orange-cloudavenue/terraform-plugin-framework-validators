{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Welcome to the orange-cloudavenue Terraform Framework Validators documentation site This repository contains a collections of validators for the Terraform Plugin Framework.</p>"},{"location":"#validators","title":"Validators","text":"<ul> <li> String Validators</li> <li> Bool Validators</li> <li> Int64 Validators</li> <li> List Validators</li> <li> Map Validators</li> <li> Set Validators</li> <li> Object Validators</li> </ul>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#installation","title":"Installation","text":"<p>For installing the validators, you can use the <code>go get</code> command:</p> <pre><code>go get github.com/orange-cloudavenue/terraform-plugin-framework-validators@latest\n</code></pre>"},{"location":"boolvalidator/","title":"BoolValidator","text":"<p>Bool validator are used to validate the plan of a boolean attribute. It will be used into the <code>Validators</code> field of the <code>schema.BoolAttribute</code> struct.</p>"},{"location":"boolvalidator/#how-to-use-it","title":"How to use it","text":"<pre><code>import (\n    fboolvalidator \"github.com/orange-cloudavenue/terraform-plugin-framework-validators/boolvalidator\"\n)\n</code></pre>"},{"location":"boolvalidator/#list-of-validators","title":"List of Validators","text":"<ul> <li><code>RequireIfAttributeIsOneOf</code> - This validator is used to require the attribute if another attribute is one of the given values.</li> <li><code>RequireIfAttributeIsSet</code> - This validator is used to require the attribute if another attribute is set.</li> <li><code>NullIfAttributeIsOneOf</code> - This validator is used to verify the attribute value is null if another attribute is one of the given values.</li> <li><code>NullIfAttributeIsSet</code> - This validator is used to verify the attribute value is null if another attribute is set.</li> </ul>"},{"location":"boolvalidator/#special","title":"Special","text":"<ul> <li><code>Not</code> - This validator is used to negate the result of another validator.</li> </ul>"},{"location":"boolvalidator/not/","title":"<code>Not</code>","text":"<p>Released in v1.0.0</p> <p>This validator is used to check if the validators passed as arguments are NOT met.</p>"},{"location":"boolvalidator/not/#how-to-use-it","title":"How to use it","text":"<p>```go // Schema defines the schema for the resource. func (r xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp resource.SchemaResponse) {     resp.Schema = schema.Schema{         (...)             \"ip\": schema.StringAttribute{                 Optional:            true,                 MarkdownDescription: \"Ip Address ...\",                 Validators: []validator.String{                     fstringvalidator.Not(fstringvalidator.IsValidIP())                 },             },</p>"},{"location":"common/null_if_attribute_is_one_of/","title":"<code>NullIfAttributeIsOneOf</code>","text":"<p>Released in v1.6.0</p> <p>This validator is used to verify the attribute value is null if another attribute is one of the given values.</p>"},{"location":"common/null_if_attribute_is_one_of/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\n    resp.Schema = schema.Schema{\n        (...)\n            \"network_type\": schema.StringAttribute{\n                Optional:            true,\n                MarkdownDescription: \"Network type ...\",\n                Validators: []validator.String{\n                    fstringvalidator.OneOf(\"public\", \"private\"),\n                },\n            },\n            \"enabled\": schema.BoolAttribute{\n                Optional:            true,\n                MarkdownDescription: \"Enable ...\",\n                Validators: []validator.Bool{\n                    fboolvalidator.NullIfAttributeIsOneOf(path.MatchRoot(\"network_type\"),[]attr.Value{types.StringValue(\"private\")})\n                },\n            },\n</code></pre>"},{"location":"common/null_if_attribute_is_one_of/#example-of-generated-documentation","title":"Example of generated documentation","text":"<p>If the value of <code>network_type</code> attribute is <code>private</code> this attribute is NULL.</p>"},{"location":"common/null_if_attribute_is_set/","title":"<code>NullIfAttributeIsSet</code>","text":"<p>Released in v1.8.0</p> <p>This validator is used to verify the attribute value is null if another attribute is set. Set could mean either the attribute is present in the configuration.</p>"},{"location":"common/null_if_attribute_is_set/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\n    resp.Schema = schema.Schema{\n        (...)\n            \"network_type\": schema.StringAttribute{\n                Optional:            true,\n                MarkdownDescription: \"Network type ...\",\n                Validators: []validator.String{\n                    fstringvalidator.OneOf(\"public\", \"private\"),\n                },\n            },\n            \"enabled\": schema.BoolAttribute{\n                Optional:            true,\n                MarkdownDescription: \"Enable ...\",\n                Validators: []validator.Bool{\n                    fboolvalidator.NullIfAttributeIsSet(path.MatchRoot(\"network_type\"))\n                },\n            },\n</code></pre>"},{"location":"common/null_if_attribute_is_set/#example-of-generated-documentation","title":"Example of generated documentation","text":"<p>If the value of <code>network_type</code> attribute is set this attribute is NULL.</p>"},{"location":"common/oneofwithdescriptionifattributeisoneof/","title":"<code>OneOfWithDescriptionIfAttributeIsOneOf</code>","text":"<p>Released in v1.9.0</p> <p>This validator allows to check if the string is one of the values \u200b\u200bof another attribute. It also allows to format the description and markdown description accordingly</p>"},{"location":"common/oneofwithdescriptionifattributeisoneof/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\n    resp.Schema = schema.Schema{\n        (...)\n            \"foo\": schema.StringAttribute{\n                Optional:            true,\n                MarkdownDescription: \"foo ...\",\n                Validators: []validator.String{\n                    fstringvalidator.OneOf(\"VM_NAME\", \"VM_TAGS\"),\n                },\n            },\n            \"bar\": schema.StringAttribute{\n                Optional:            true,\n                MarkdownDescription: \"bar of ...\",\n                Validators: []validator.String{\n                    fstringvalidator.OneOfWithDescriptionIfAttributeIsOneOf(\n                        path.MatchRelative().AtParent().AtName(\"foo\"),\n                        []attr.Value{types.StringValue(\"VM_NAME\")},\n                        func() []fstringvalidator.OneOfWithDescriptionIfAttributeIsOneOfValues {\n                            return []fstringvalidator.OneOfWithDescriptionIfAttributeIsOneOfValues{\n                                {\n                                    Value:       \"CONTAINS\",\n                                    Description: \"The `value` must be contained in the VM name.\",\n                                },\n                                {\n                                    Value:       \"STARTS_WITH\",\n                                    Description: \"The VM name must start with the `value`.\",\n                                },\n                                {\n                                    Value:       \"ENDS_WITH\",\n                                    Description: \"The VM name must end with the `value`.\",\n                                },\n                                {\n                                    Value:       \"EQUALS\",\n                                    Description: \"The VM name must be equal to the `value`.\",\n                                },\n                            }\n                        }()...),\n                },\n            },\n</code></pre>"},{"location":"common/oneofwithdescriptionifattributeisoneof/#description-and-markdown-description","title":"Description and Markdown description","text":"<ul> <li>Description: If the value of attribute &lt;.type is \"VM_NAME\" the allowed values are : \"CONTAINS\" (The <code>value</code> must be contained in the VM name.), \"STARTS_WITH\" (The VM name must start with the <code>value</code>.), \"ENDS_WITH\" (The VM name must end with the <code>value</code>.), \"EQUALS\" (The VM name must be equal to the <code>value</code>.)</li> <li>Markdown description:</li> </ul>"},{"location":"common/require_if_attribute_is_one_of/","title":"<code>RequireIfAttributeIsOneOf</code>","text":"<p>Released in v1.3.0</p> <p>This validator is used to require the attribute if another attribute is one of the given values.</p>"},{"location":"common/require_if_attribute_is_one_of/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\n    resp.Schema = schema.Schema{\n        (...)\n            \"network_type\": schema.StringAttribute{\n                Optional:            true,\n                MarkdownDescription: \"Network type ...\",\n                Validators: []validator.String{\n                    fstringvalidator.OneOf(\"public\", \"private\"),\n                },\n            },\n            \"enabled\": schema.BoolAttribute{\n                Optional:            true,\n                MarkdownDescription: \"Enable ...\",\n                Validators: []validator.String{\n                    fboolvalidator.RequireIfAttributeIsOneOf(path.MatchRoot(\"network_type\"),[]attr.Value{types.StringValue(\"private\")})\n                },\n            },\n</code></pre>"},{"location":"common/require_if_attribute_is_one_of/#example-of-generated-documentation","title":"Example of generated documentation","text":"<p>If the value of <code>network_type</code> attribute is <code>private</code> this attribute is REQUIRED.</p>"},{"location":"common/require_if_attribute_is_set/","title":"<code>RequireIfAttributeIsSet</code>","text":"<p>Released in v1.8.0</p> <p>This validator is used to require the attribute if another attribute is set. Set could mean either the attribute is present in the configuration.</p>"},{"location":"common/require_if_attribute_is_set/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\n    resp.Schema = schema.Schema{\n        (...)\n            \"network_type\": schema.StringAttribute{\n                Optional:            true,\n                MarkdownDescription: \"Network type ...\",\n                Validators: []validator.String{\n                    fstringvalidator.OneOf(\"public\", \"private\"),\n                },\n            },\n            \"enabled\": schema.BoolAttribute{\n                Optional:            true,\n                MarkdownDescription: \"Enable ...\",\n                Validators: []validator.String{\n                    fboolvalidator.RequireIfAttributeIsSet(path.MatchRoot(\"network_type\"))\n                },\n            },\n</code></pre>"},{"location":"common/require_if_attribute_is_set/#example-of-generated-documentation","title":"Example of generated documentation","text":"<p>If the value of <code>network_type</code> attribute is set this attribute is REQUIRED.</p>"},{"location":"int32validator/","title":"Int32Validator","text":"<p>Int32 validator are used to validate the plan of a int32 attribute. It will be used into the <code>Validators</code> field of the <code>schema.Int32Attribute</code> struct.</p>"},{"location":"int32validator/#how-to-use-it","title":"How to use it","text":"<pre><code>import (\n    fint32validator \"github.com/orange-cloudavenue/terraform-plugin-framework-validators/int32validator\"\n)\n</code></pre>"},{"location":"int32validator/#list-of-validators","title":"List of Validators","text":"<ul> <li><code>RequireIfAttributeIsOneOf</code> - This validator is used to require the attribute if another attribute is one of the given values.</li> <li><code>RequireIfAttributeIsSet</code> - This validator is used to require the attribute if another attribute is set.</li> <li><code>NullIfAttributeIsOneOf</code> - This validator is used to verify the attribute value is null if another attribute is one of the given values.</li> <li><code>NullIfAttributeIsSet</code> - This validator is used to verify the attribute value is null if another attribute is set.</li> <li><code>OneOfWithDescription</code> - This validator is used to check if the string is one of the given values and format the description and the markdown description.</li> <li><code>OneOfWithDescriptionIfAttributeIsOneOf</code> - This validator is used to check if the string is one of the given values if the attribute is one of and format the description and the markdown description.</li> <li><code>AttributeIsDivisibleByAnInteger</code> - This validator is used to validate that the attribute is divisible by an integer.</li> <li><code>ZeroRemainder</code> - This validator checks if the configured attribute is divisible by a specified integer X, and has zero remainder.</li> </ul>"},{"location":"int32validator/#special","title":"Special","text":"<ul> <li><code>Not</code> - This validator is used to negate the result of another validator.</li> </ul>"},{"location":"int32validator/attribute_is_divisible_by_an_integer/","title":"<code>AttributeIsDivisibleByAnInteger</code>","text":"<p>Released in v1.13.0</p> <p>This validator is used to check if the attribute is divisible by an integer.</p>"},{"location":"int32validator/attribute_is_divisible_by_an_integer/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\n    resp.Schema = schema.Schema{\n        (...)\n            \"cpus\": schema.Int32Attribute{\n                Optional:            true,\n                MarkdownDescription: \"Number of CPUs\",\n            },\n            \"cpus_cores\": schema.Int32Attribute{\n                Optional:            true,\n                MarkdownDescription: \"Number of CPUs cores\",\n                Validators: []validator.Int32{\n                    fint32validator.AttributeIsDivisibleByAnInteger(path.MatchRoot(\"cpus\"))\n                },\n            },\n</code></pre>"},{"location":"int32validator/not/","title":"<code>Not</code>","text":"<p>Released in v1.13.0</p> <p>This validator is used to check if the validators passed as arguments are NOT met.</p>"},{"location":"int32validator/not/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\n    resp.Schema = schema.Schema{\n        (...)\n            \"count\": schema.Int32Attribute{\n                Optional:            true,\n                MarkdownDescription: \"Count of ...\",\n                Validators: []validator.Int32{\n                    fint32validator.Not(int32validator.Between(10,20))\n                },\n            },\n</code></pre>"},{"location":"int32validator/oneofwithdescription/","title":"<code>OneOfWithDescription</code>","text":"<p>Released in v1.13.0</p> <p>This validator is used to check if the string is one of the given values and format the description and the markdown description.</p>"},{"location":"int32validator/oneofwithdescription/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\n    resp.Schema = schema.Schema{\n        (...)\n            \"interface_type\": schema.StringAttribute{\n                Optional:            true,\n                MarkdownDescription: \"Type of ...\",\n                Validators: []validator.Int32{\n                    fint32validator.OneOfWithDescription(\n                        fint32validator.OneOfWithDescriptionValues{\n                            Value:       1,\n                            Description: \"Vmware interface\",\n                        },\n                        fint32validator.OneOfWithDescriptionValues{\n                            Value:       2,\n                            Description: \"Intel interface\",\n                        },\n                    )\n                },\n            },\n</code></pre>"},{"location":"int32validator/oneofwithdescription/#description-and-markdown-description","title":"Description and Markdown description","text":""},{"location":"int32validator/oneofwithdescription/#description","title":"Description","text":"<p>Value must be one of: \"1\" (Vmware interface), \"2\" (Intel interface)</p>"},{"location":"int32validator/oneofwithdescription/#markdown-description","title":"Markdown description","text":"<p>Value must be one of:</p> <ul> <li><code>1</code> (Vmware interface)</li> <li><code>2</code> (Intel interface)</li> </ul>"},{"location":"int32validator/zero_remainder/","title":"<code>ZeroRemainder</code>","text":"<p>Released in v1.13.0</p> <p>This validator checks if the configured attribute is divisible by a specified integer X, and has zero remainder.</p>"},{"location":"int32validator/zero_remainder/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\n    resp.Schema = schema.Schema{\n        (...)\n            \"memory\": schema.Int32Attribute{\n                Optional:            true,\n                MarkdownDescription: \"Memory\",\n                Validators: []validator.Int32{\n                    fint32validator.ZeroRemainder(4),\n                },\n            },\n</code></pre>"},{"location":"int64validator/","title":"Int64Validator","text":"<p>Int64 validator are used to validate the plan of a int64 attribute. It will be used into the <code>Validators</code> field of the <code>schema.Int64Attribute</code> struct.</p>"},{"location":"int64validator/#how-to-use-it","title":"How to use it","text":"<pre><code>import (\n    fint64validator \"github.com/orange-cloudavenue/terraform-plugin-framework-validators/int64validator\"\n)\n</code></pre>"},{"location":"int64validator/#list-of-validators","title":"List of Validators","text":"<ul> <li><code>RequireIfAttributeIsOneOf</code> - This validator is used to require the attribute if another attribute is one of the given values.</li> <li><code>RequireIfAttributeIsSet</code> - This validator is used to require the attribute if another attribute is set.</li> <li><code>NullIfAttributeIsOneOf</code> - This validator is used to verify the attribute value is null if another attribute is one of the given values.</li> <li><code>NullIfAttributeIsSet</code> - This validator is used to verify the attribute value is null if another attribute is set.</li> <li><code>OneOfWithDescription</code> - This validator is used to check if the string is one of the given values and format the description and the markdown description.</li> <li><code>OneOfWithDescriptionIfAttributeIsOneOf</code> - This validator is used to check if the string is one of the given values if the attribute is one of and format the description and the markdown description.</li> <li><code>AttributeIsDivisibleByAnInteger</code> - This validator is used to validate that the attribute is divisible by an integer.</li> <li><code>ZeroRemainder</code> - This validator checks if the configured attribute is divisible by a specified integer X, and has zero remainder.</li> </ul>"},{"location":"int64validator/#special","title":"Special","text":"<ul> <li><code>Not</code> - This validator is used to negate the result of another validator.</li> </ul>"},{"location":"int64validator/attribute_is_divisible_by_an_integer/","title":"<code>AttributeIsDivisibleByAnInteger</code>","text":"<p>Released in v1.4.0</p> <p>This validator is used to check if the attribute is divisible by an integer.</p>"},{"location":"int64validator/attribute_is_divisible_by_an_integer/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\n    resp.Schema = schema.Schema{\n        (...)\n            \"cpus\": schema.Int64Attribute{\n                Optional:            true,\n                MarkdownDescription: \"Number of CPUs\",\n            },\n            \"cpus_cores\": schema.Int64Attribute{\n                Optional:            true,\n                MarkdownDescription: \"Number of CPUs cores\",\n                Validators: []validator.Int64{\n                    fint64validator.AttributeIsDivisibleByAnInteger(path.MatchRoot(\"cpus\"))\n                },\n            },\n</code></pre>"},{"location":"int64validator/not/","title":"<code>Not</code>","text":"<p>Released in v1.0.0</p> <p>This validator is used to check if the validators passed as arguments are NOT met.</p>"},{"location":"int64validator/not/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\n    resp.Schema = schema.Schema{\n        (...)\n            \"count\": schema.Int64Attribute{\n                Optional:            true,\n                MarkdownDescription: \"Count of ...\",\n                Validators: []validator.Int64{\n                    fint64validator.Not(int64validator.Between(10,20))\n                },\n            },\n</code></pre>"},{"location":"int64validator/oneofwithdescription/","title":"<code>OneOfWithDescription</code>","text":"<p>Released in v1.5.0</p> <p>This validator is used to check if the string is one of the given values and format the description and the markdown description.</p>"},{"location":"int64validator/oneofwithdescription/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\n    resp.Schema = schema.Schema{\n        (...)\n            \"interface_type\": schema.StringAttribute{\n                Optional:            true,\n                MarkdownDescription: \"Type of ...\",\n                Validators: []validator.Int64{\n                    fint64validator.OneOfWithDescription(\n                        fint64validator.OneOfWithDescriptionValues{\n                            Value:       1,\n                            Description: \"Vmware interface\",\n                        },\n                        fint64validator.OneOfWithDescriptionValues{\n                            Value:       2,\n                            Description: \"Intel interface\",\n                        },\n                    )\n                },\n            },\n</code></pre>"},{"location":"int64validator/oneofwithdescription/#description-and-markdown-description","title":"Description and Markdown description","text":""},{"location":"int64validator/oneofwithdescription/#description","title":"Description","text":"<p>Value must be one of: \"1\" (Vmware interface), \"2\" (Intel interface)</p>"},{"location":"int64validator/oneofwithdescription/#markdown-description","title":"Markdown description","text":"<p>Value must be one of:</p> <ul> <li><code>1</code> (Vmware interface)</li> <li><code>2</code> (Intel interface)</li> </ul>"},{"location":"int64validator/zero_remainder/","title":"<code>ZeroRemainder</code>","text":"<p>Released in v1.4.0</p> <p>This validator checks if the configured attribute is divisible by a specified integer X, and has zero remainder.</p>"},{"location":"int64validator/zero_remainder/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\n    resp.Schema = schema.Schema{\n        (...)\n            \"memory\": schema.Int64Attribute{\n                Optional:            true,\n                MarkdownDescription: \"Memory\",\n                Validators: []validator.Int64{\n                    fint64validator.ZeroRemainder(4),\n                },\n            },\n</code></pre>"},{"location":"listvalidator/","title":"ListValidator","text":"<p>List validator are used to validate the plan of a list attribute. It will be used into the <code>Validators</code> field of the <code>schema.ListAttribute</code> struct.</p>"},{"location":"listvalidator/#how-to-use-it","title":"How to use it","text":"<pre><code>import (\n    flistvalidator \"github.com/orange-cloudavenue/terraform-plugin-framework-validators/listvalidator\"\n)\n</code></pre>"},{"location":"listvalidator/#list-of-validators","title":"List of Validators","text":"<p>Every <code>string</code> validators are available for maps thanks to a generic validator provided by Hashicorp. See the section below for more details.</p> <ul> <li><code>RequireIfAttributeIsOneOf</code> - This validator is used to require the attribute if another attribute is one of the given values.</li> <li><code>RequireIfAttributeIsSet</code> - This validator is used to require the attribute if another attribute is set.</li> <li><code>NullIfAttributeIsOneOf</code> - This validator is used to verify the attribute value is null if another attribute is one of the given values.</li> <li><code>NullIfAttributeIsSet</code> - This validator is used to verify the attribute value is null if another attribute is set.</li> </ul>"},{"location":"listvalidator/#special","title":"Special","text":"<ul> <li><code>Not</code> - This validator is used to negate the result of another validator.</li> </ul>"},{"location":"listvalidator/#generic","title":"Generic","text":""},{"location":"listvalidator/#string","title":"String","text":"<p>Hashicorp provides a generic validator for strings. It uses the validators already defined in string to validate a list of strings. It is available in the hashicorp stringvalidator package.</p> <p>Example of usage:</p> <pre><code>// Used within a Schema method of a DataSource, Provider, or Resource\n_ = schema.Schema{\n    Attributes: map[string]schema.Attribute{\n        \"example_attr\": schema.ListAttribute{\n            ElementType: types.StringType,\n            Required:    true,\n            Validators: []validator.List{\n                // Validate this List must contain string values which are at least 3 characters.\n                listvalidator.ValueStringsAre(fstringvalidator.IsUUID()),\n            },\n        },\n    },\n}\n</code></pre>"},{"location":"listvalidator/not/","title":"<code>Not</code>","text":"<p>Released in v1.0.0</p> <p>This validator is used to check if the validators passed as arguments are NOT met.</p>"},{"location":"listvalidator/not/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\n    resp.Schema = schema.Schema{\n        (...)\n            \"list_of\": schema.ListAttribute{\n                Optional:            true,\n                MarkdownDescription: \"List of ...\",\n                Validators: []validator.List{\n                    flistvalidator.Not(listvalidator.Between(10,20))\n                },\n            },\n</code></pre>"},{"location":"mapvalidator/","title":"MapValidator","text":"<p>Map validator are used to validate the plan of a map attribute. It will be used into the <code>Validators</code> field of the <code>schema.MapAttribute</code> struct.</p>"},{"location":"mapvalidator/#how-to-use-it","title":"How to use it","text":"<pre><code>import (\n    fmapvalidator \"github.com/orange-cloudavenue/terraform-plugin-framework-validators/mapvalidator\"\n)\n</code></pre>"},{"location":"mapvalidator/#list-of-validators","title":"List of Validators","text":"<p>Every <code>string</code> validators are available for maps thanks to a generic validator provided by Hashicorp. See the section below for more details.</p> <ul> <li><code>RequireIfAttributeIsOneOf</code> - This validator is used to require the attribute if another attribute is one of the given values.</li> <li><code>RequireIfAttributeIsSet</code> - This validator is used to require the attribute if another attribute is set.</li> <li><code>NullIfAttributeIsOneOf</code> - This validator is used to verify the attribute value is null if another attribute is one of the given values.</li> <li><code>NullIfAttributeIsSet</code> - This validator is used to verify the attribute value is null if another attribute is set.</li> </ul>"},{"location":"mapvalidator/#special","title":"Special","text":"<ul> <li><code>Not</code> - This validator is used to negate the result of another validator.</li> </ul>"},{"location":"mapvalidator/#generic","title":"Generic","text":""},{"location":"mapvalidator/#string","title":"String","text":"<p>Hashicorp provides a generic validator for strings. It uses the validators already defined in string to validate a list of strings. It is available in the hashicorp stringvalidator package.</p> <p>Example of usage:</p> <pre><code>    // Used within a Schema method of a DataSource, Provider, or Resource\n    _ = schema.Schema{\n        Attributes: map[string]schema.Attribute{\n            \"example_attr\": schema.MapAttribute{\n                ElementType: types.StringType,\n                Required:    true,\n                Validators: []validator.Map{\n                    // Validate this Map must contain string values which are at least 3 characters.\n                    mapvalidator.ValueStringsAre(fstringvalidator.IsUUID()),\n                },\n            },\n        },\n    }\n</code></pre>"},{"location":"mapvalidator/not/","title":"<code>Not</code>","text":"<p>Released in v1.0.0</p> <p>This validator is used to check if the validators passed as arguments are NOT met.</p>"},{"location":"mapvalidator/not/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\n    resp.Schema = schema.Schema{\n        (...)\n            \"map_of\": schema.MapAttribute{\n                Optional:            true,\n                MarkdownDescription: \"Map of ...\",\n                Validators: []validator.Map{\n                    fmapvalidator.Not(mapvalidator.Between(10,20))\n                },\n            },\n</code></pre>"},{"location":"objectvalidator/","title":"ObjectValidator","text":"<p>Object validator are used to validate the plan of an object attribute. It will be used into the <code>Validators</code> field of the <code>schema.ObjectAttribute</code> struct.</p>"},{"location":"objectvalidator/#how-to-use-it","title":"How to use it","text":"<pre><code>import (\n    fobjectvalidator \"github.com/orange-cloudavenue/terraform-plugin-framework-validators/objectvalidator\"\n)\n</code></pre>"},{"location":"objectvalidator/#list-of-validators","title":"List of Validators","text":"<ul> <li><code>RequireIfAttributeIsOneOf</code> - This validator is used to require the attribute if another attribute is one of the given values.</li> <li><code>RequireIfAttributeIsSet</code> - This validator is used to require the attribute if another attribute is set.</li> <li><code>NullIfAttributeIsOneOf</code> - This validator is used to verify the attribute value is null if another attribute is one of the given values.</li> <li><code>NullIfAttributeIsSet</code> - This validator is used to verify the attribute value is null if another attribute is set.</li> </ul>"},{"location":"objectvalidator/#special","title":"Special","text":"<ul> <li><code>Not</code> - This validator is used to negate the result of another validator.</li> </ul>"},{"location":"objectvalidator/not/","title":"<code>Not</code>","text":"<p>Released in v1.11.0</p> <p>This validator is used to check if the validators passed as arguments are NOT met.</p>"},{"location":"objectvalidator/not/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\n    resp.Schema = schema.Schema{\n        (...)\n            \"my_object\": schema.SingleNestedAttribute{\n                Optional:            true,\n                MarkdownDescription: \"My Object ...\",\n                Validators:          []validator.Object{\n                    fobjectvalidator.Not(...)\n                },\n            },\n</code></pre>"},{"location":"setvalidator/","title":"SetValidator","text":"<p>Set validator are used to validate the plan of a set attribute. It will be used into the <code>Validators</code> field of the <code>schema.SetAttribute</code> struct.</p>"},{"location":"setvalidator/#how-to-use-it","title":"How to use it","text":"<pre><code>import (\n    fsetvalidator \"github.com/orange-cloudavenue/terraform-plugin-framework-validators/setvalidator\"\n)\n</code></pre>"},{"location":"setvalidator/#list-of-validators","title":"List of Validators","text":"<p>Every <code>string</code> validators are available for maps thanks to a generic validator provided by Hashicorp. See the section below for more details.</p> <ul> <li><code>RequireIfAttributeIsOneOf</code> - This validator is used to require the attribute if another attribute is one of the given values.</li> <li><code>RequireIfAttributeIsSet</code> - This validator is used to require the attribute if another attribute is set.</li> <li><code>NullIfAttributeIsOneOf</code> - This validator is used to verify the attribute value is null if another attribute is one of the given values.</li> <li><code>NullIfAttributeIsSet</code> - This validator is used to verify the attribute value is null if another attribute is set.</li> </ul>"},{"location":"setvalidator/#special","title":"Special","text":"<ul> <li><code>Not</code> - This validator is used to negate the result of another validator.</li> </ul>"},{"location":"setvalidator/#generic","title":"Generic","text":""},{"location":"setvalidator/#string","title":"String","text":"<p>Hashicorp provides a generic validator for strings. It uses the validators already defined in string to validate a list of strings. It is available in the hashicorp stringvalidator package.</p> <p>Example of usage:</p> <pre><code>_ = schema.Schema{\n    Attributes: map[string]schema.Attribute{\n        \"example_attr\": schema.SetAttribute{\n            ElementType: types.StringType,\n            Required:    true,\n            Validators: []validator.Set{\n                // Validate this Set must contain string values which are URNs.\n                setvalidator.ValueStringsAre(fstringvalidator.IsURN())\n            },\n        },\n    },\n}\n</code></pre>"},{"location":"setvalidator/not/","title":"<code>Not</code>","text":"<p>Released in v1.0.0</p> <p>This validator is used to check if the validators passed as arguments are NOT met.</p>"},{"location":"setvalidator/not/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\n    resp.Schema = schema.Schema{\n        (...)\n            \"set_of\": schema.SetAttribute{\n                Optional:            true,\n                MarkdownDescription: \"Set of ...\",\n                Validators: []validator.Set{\n                    fsetvalidator.Not(setvalidator.Between(10,20))\n                },\n            },\n</code></pre>"},{"location":"stringvalidator/","title":"StringValidator","text":"<p>String validator are used to validate the plan of a string attribute. It will be used into the <code>Validators</code> field of the <code>schema.StringAttribute</code> struct.</p>"},{"location":"stringvalidator/#how-to-use-it","title":"How to use it","text":"<pre><code>import (\n    fstringvalidator \"github.com/orange-cloudavenue/terraform-plugin-framework-validators/stringvalidator\"\n)\n</code></pre>"},{"location":"stringvalidator/#list-of-validators","title":"List of Validators","text":"<ul> <li><code>RequireIfAttributeIsOneOf</code> - This validator is used to require the attribute if another attribute is one of the given values.</li> <li><code>RequireIfAttributeIsSet</code> - This validator is used to require the attribute if another attribute is set.</li> <li><code>NullIfAttributeIsOneOf</code> - This validator is used to verify the attribute value is null if another attribute is one of the given values.</li> <li><code>NullIfAttributeIsSet</code> - This validator is used to verify the attribute value is null if another attribute is set.</li> <li><code>OneOfWithDescription</code> - This validator is used to check if the string is one of the given values and format the description and the markdown description.</li> <li><code>OneOfWithDescriptionIfAttributeIsOneOf</code> - This validator is used to check if the string is one of the given values if the attribute is one of and format the description and the markdown description.</li> </ul>"},{"location":"stringvalidator/#network","title":"Network","text":"<ul> <li><code>IsNetwork</code> - This validator is a generic validator for checking if the string is a valid network format.</li> <li><code>IsIP</code> - (DEPRECATED) This validator is used to check if the string is a valid IP address.</li> <li><code>IsNetmask</code> - This validator is used to check if the string is a valid netmask.</li> <li><code>IsMacAddress</code> - This validator is used to check if the string is a valid MAC address.</li> </ul>"},{"location":"stringvalidator/#string","title":"String","text":"<ul> <li><code>IsURN</code> - (DEPRECATED) This validator is used to check if the string is a valid URN (Use <code>Formats</code> validator instead).</li> <li><code>IsUUID</code> - (DEPRECATED) This validator is used to check if the string is a valid UUID (Use <code>Formats</code> validator instead).</li> <li><code>PrefixContains</code> - This validator is used to check if the string contains prefix in the given value.</li> <li><code>Cases</code> - This validator is a generic validator for checking if the string respects a case.</li> <li><code>Formats</code> - This validator is a generic validator for checking if the string respects of a format.</li> </ul>"},{"location":"stringvalidator/#special","title":"Special","text":"<ul> <li><code>Not</code> - This validator is used to negate the result of another validator.</li> <li><code>HTTPCode</code> - This validator is used to check if the string contains a valid http status code.</li> </ul>"},{"location":"stringvalidator/cases/","title":"<code>Cases</code>","text":"<p>Released in v1.12.0</p> <p>This validator is used to check if the string contains or does not contain certain characters.</p>"},{"location":"stringvalidator/cases/#how-to-use-it","title":"How to use it","text":"<p>The validator takes a list of CasesValidatorType.</p> <p>The list can contain one or more of the following values:</p> <ul> <li><code>CasesDisallowUpper</code> - Check if the string does not contain any uppercase characters.</li> <li><code>CasesDisallowLower</code> - Check if the string does not contain any lowercase characters.</li> <li><code>CasesDisallowSpace</code>- Check if the string does not contain any space characters.</li> <li><code>CasesDisallowNumber</code> - Check if the string does not contain any number characters.</li> </ul>"},{"location":"stringvalidator/cases/#example-disallowupper-and-disallowspace","title":"Example DisallowUpper and DisallowSpace","text":"<p>The following example will check if the string does not contain any uppercase characters and does not contain any space characters.</p> <pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\n    resp.Schema = schema.Schema{\n        (...)\n            \"user_name\": schema.StringAttribute{\n                Optional:            true,\n                MarkdownDescription: \"Username for ...\",\n                Validators: []validator.String{\n                    fstringvalidator.Cases([]fstringvalidator.CasesValidatorType{\n                        fstringvalidator.CasesDisallowUpper,\n                        fstringvalidator.CasesDisallowSpace,\n                    }, true)\n                },\n            },\n</code></pre>"},{"location":"stringvalidator/formats/","title":"<code>Formats</code>","text":"<p>The Formats validator is a flexible utility designed to validate whether a given string adheres to specific predefined formats. It supports multiple validation types, enabling you to ensure strings meet requirements such as Base64 encoding, UUIDs, etc...</p>"},{"location":"stringvalidator/formats/#how-to-use-it","title":"How to use it","text":"<p>The validator accepts a list of FormatsValidatorType values, which specify the formats to validate. You can include one or more of the following options:</p> <ul> <li><code>IsBase64</code> - Check if the string is a valid Base64 encoded string.</li> <li><code>IsUUIDv4</code> - Check if the string is a valid (v4) UUID.</li> <li><code>IsURN</code> - Check if the string is a valid URN.</li> </ul>"},{"location":"stringvalidator/formats/#example-isbase64","title":"Example IsBase64","text":"<p>The following example demonstrates how to use the validator to check if a string is a valid Base64-encoded value.</p> <pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\n    resp.Schema = schema.Schema{\n        (...)\n            \"content_encoded\": schema.StringAttribute{\n                Optional:            true,\n                MarkdownDescription: \"Content for ...\",\n                Validators: []validator.String{\n                    fstringvalidator.Formats(\n                        []fstringvalidator.FormatsValidatorType{\n                            fstringvalidator.IsBase64,\n                        }, \n                        false,\n                    ),\n                },\n            },\n</code></pre>"},{"location":"stringvalidator/formats/#example-isuuidv4","title":"Example IsUUIDv4","text":"<p>The following example demonstrates how to use the validator to check if a string is a valid version 4 (v4) UUID.</p> <pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {  \n    resp.Schema = schema.Schema{  \n        (...)  \n        \"uuid\": schema.StringAttribute{  \n            Optional:            true,  \n            MarkdownDescription: \"Unique identifier (UUID v4) for the resource.\",  \n            Validators: []validator.String{  \n                fstringvalidator.Formats(  \n                    []fstringvalidator.FormatsValidatorType{  \n                        fstringvalidator.IsUUIDv4,  \n                    }, \n                    false,\n                ),\n            },\n        },\n        (...)\n    }\n}\n</code></pre>"},{"location":"stringvalidator/formats/#example-isurn","title":"Example IsURN","text":"<p>The following example will check if the string is a valid URN.</p> <pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\n    resp.Schema = schema.Schema{\n        (...)\n            \"urn\": schema.StringAttribute{\n            Optional:            true,\n            MarkdownDescription: \"Uniform Resource Name (URN) for the resource.\",\n            Validators: []validator.String{\n                fstringvalidator.Formats(\n                    []fstringvalidator.FormatsValidatorType{\n                        fstringvalidator.IsURN,\n                    }, \n                    false,\n                ),\n            },\n        },\n        (...)\n    }\n}\n</code></pre>"},{"location":"stringvalidator/formats/#example-with-multiple-formats-checks","title":"Example with multiple formats checks","text":"<p>The Formats validator can also be used to validate multiple formats at once. You can combine different formats in a single validator by passing them as a slice of FormatsValidatorType values. This allows you to check if a string is valid for any of the specified formats.</p> <p>The following example demonstrates how to use the validator to check if a string is a valid URN value OR a valid version 4 (v4) UUID.</p> <pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\n    resp.Schema = schema.Schema{\n        (...)\n            \"id\": schema.StringAttribute{\n                Optional:            true,\n                MarkdownDescription: \"ID can be an urn or uuid format ...\",\n                Validators: []validator.String{\n                    fstringvalidator.Formats(\n                        []fstringvalidator.FormatsValidatorType{\n                            fstringvalidator.IsURN,\n                            fstringvalidator.IsUUIDv4,\n                        }, \n                        true,\n                    ),\n                },\n            },\n        (...)\n    }\n}\n</code></pre>"},{"location":"stringvalidator/httpcode/","title":"<code>Cases</code>","text":"<p>Released in v1.15.0</p> <p>This validator is used to check if the string contains a valid http status code. A parameter can be passed to allow a category of status codes. The following categories are available:</p> <ul> <li><code>1xx</code> - Informational responses</li> <li><code>2xx</code> - Successful responses</li> <li><code>3xx</code> - Redirection messages</li> <li><code>4xx</code> - Client error responses</li> <li><code>5xx</code> - Server error responses</li> </ul>"},{"location":"stringvalidator/httpcode/#how-to-use-it","title":"How to use it","text":"<p>The following example will check if the string does not contain any uppercase characters and does not contain any space characters.</p> <pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\n    resp.Schema = schema.Schema{\n        (...)\n            \"status_code\": schema.StringAttribute{\n                Optional:            true,\n                MarkdownDescription: \"Allowed HTTP status code\",\n                Validators: []validator.String{\n                    fstringvalidator.HTTPCode(stringvalidator.HTTPCodeParams{\n                      Allow1xx: false,\n                      Allow2xx: true,\n                      Allow3xx: true,\n                      Allow4xx: false,\n                      Allow5xx: false,\n           })\n                },\n            },\n</code></pre> <p>In this example, the validator will check if the string is a valid HTTP status code and will allow only 2xx and 3xx status codes.</p>"},{"location":"stringvalidator/isip/","title":"<code>IsIP</code>","text":"<p>Deprecated</p> <p>Use IsNetwork instead.</p> <p>This validator is used to check if the string is a valid IP address.</p>"},{"location":"stringvalidator/isip/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\n    resp.Schema = schema.Schema{\n        (...)\n            \"ip_address\": schema.StringAttribute{\n                Optional:            true,\n                MarkdownDescription: \"IPV4 for ...\",\n                Validators: []validator.String{\n                    fstringvalidator.IsIP()\n                },\n            },\n</code></pre>"},{"location":"stringvalidator/ismacaddress/","title":"<code>IsMacAddress</code>","text":"<p>Released in v1.2.0</p> <p>This validator is used to check if the string is a valid Mac Address.</p>"},{"location":"stringvalidator/ismacaddress/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\n    resp.Schema = schema.Schema{\n        (...)\n            \"mac_address\": schema.StringAttribute{\n                Optional:            true,\n                MarkdownDescription: \"Mac Adresse for ...\",\n                Validators: []validator.String{\n                    fstringvalidator.IsMacAddress()\n                },\n            },\n</code></pre>"},{"location":"stringvalidator/isnetmask/","title":"<code>IsNetmask</code>","text":"<p>Released in v1.1.0</p> <p>This validator is used to check if the string is a valid netmask.</p>"},{"location":"stringvalidator/isnetmask/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\n    resp.Schema = schema.Schema{\n        (...)\n            \"netmask\": schema.StringAttribute{\n                Optional:            true,\n                MarkdownDescription: \"Netmask for ...\",\n                Validators: []validator.String{\n                    fstringvalidator.IsValidNetmask()\n                },\n            },\n</code></pre>"},{"location":"stringvalidator/isnetwork/","title":"<code>IsNetwork</code>","text":"<p>Released in v1.8.0</p> <p>This validator is a generic validator for checking if the string respects a case.</p>"},{"location":"stringvalidator/isnetwork/#how-to-use-it","title":"How to use it","text":"<p>The validator takes a list of NetworkValidatorType and a boolean as argument.</p> <p>The list can contain one or more of the following values:</p> <p>IPV4</p> <ul> <li><code>IPV4</code> - Check if the string is a valid IPV4 address (Ex: 192.168.0.1).</li> <li><code>IPV4WithCIDR</code> - Check if the string is a valid IPV4 address with CIDR (Ex: 192.168.0.0/24).</li> <li><code>IPV4WithNetmask</code>- Check if the string is a valid IPV4 address with netmask (Ex: 192.168.0.0/255.255.255.0).</li> <li><code>IPV4Range</code> - Check if the string is a valid IPV4 address range (Ex: 192.168.0.1-192.168.0.10).</li> <li><code>RFC1918</code> - Check if the string is a valid RFC1918 address.</li> </ul> <p>TCP/UDP</p> <ul> <li><code>TCPUDPPort</code> - Check if the string is a valid TCP/UDP port (Ex: <code>8080</code>).</li> <li><code>TCPUDPPortRange</code> - Check if the string is a valid TCP/UDP port range (Ex: <code>8080-8090</code>).</li> </ul> <p>The boolean is used to define if the value must be at least one of the network types.</p>"},{"location":"stringvalidator/isnetwork/#example-or","title":"Example OR","text":"<p>The following example will check if the string is a valid IPV4 address with CIDR or a valid IPV4 address with netmask.</p> <pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\n    resp.Schema = schema.Schema{\n        (...)\n            \"ip_address\": schema.StringAttribute{\n                Optional:            true,\n                MarkdownDescription: \"IPV4 for ...\",\n                Validators: []validator.String{\n                    fstringvalidator.IsNetwork([]fstringvalidator.NetworkValidatorType{\n                        fstringvalidator.IPV4WithCIDR,\n                        fstringvalidator.IPV4WithNetmask,\n                    }, true)\n                },\n            },\n</code></pre>"},{"location":"stringvalidator/isnetwork/#example-and","title":"Example AND","text":"<p>The following example will check if the string is a valid IPV4 and a valid RFC1918 address.</p> <pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\n    resp.Schema = schema.Schema{\n        (...)\n            \"ip_address\": schema.StringAttribute{\n                Optional:            true,\n                MarkdownDescription: \"IPV4 for ...\",\n                Validators: []validator.String{\n                    fstringvalidator.IsNetwork([]fstringvalidator.NetworkValidatorType{\n                        fstringvalidator.IPV4,\n                        fstringvalidator.RFC1918,\n                    }, false)\n                },\n            },\n</code></pre>"},{"location":"stringvalidator/isurn/","title":"<code>IsURN</code>","text":"<p>Released in v1.1.0</p> <p>Warning</p> <p>Now this validator is deprecated, please use <code>formats.IsURN</code> instead</p> <p>This validator is used to check if the string is a valid URN.</p>"},{"location":"stringvalidator/isurn/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\n    resp.Schema = schema.Schema{\n        (...)\n            \"urn\": schema.StringAttribute{\n            Optional:            true,\n            MarkdownDescription: \"Uniform Resource Name (URN) for the resource.\",\n            Validators: []validator.String{\n                fstringvalidator.IsValidURN()\n            },\n        },\n        (...)\n    }\n}\n</code></pre>"},{"location":"stringvalidator/isuuid/","title":"<code>IsUUID</code>","text":"<p>Released in v1.1.0</p> <p>Warning</p> <p>Now this validator is deprecated, please use <code>formats.IsUUIDv4</code> instead</p> <p>This validator is used to check if the string is a valid (v4) UUID.</p>"},{"location":"stringvalidator/isuuid/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\n    resp.Schema = schema.Schema{\n        (...)\n            \"uuid\": schema.StringAttribute{  \n            Optional:            true,  \n            MarkdownDescription: \"Unique identifier (UUID v4) for the resource.\",  \n            Validators: []validator.String{\n                fstringvalidator.IsValidUUID()\n            },\n        },\n        (...)\n    }\n}\n</code></pre>"},{"location":"stringvalidator/not/","title":"<code>Not</code>","text":"<p>Released in v1.0.0</p> <p>This validator is used to check if the validators passed as arguments are NOT met.</p>"},{"location":"stringvalidator/not/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\n    resp.Schema = schema.Schema{\n        (...)\n            \"ip_address\": schema.StringAttribute{\n                Optional:            true,\n                MarkdownDescription: \"IPV4 for ...\",\n                Validators: []validator.String{\n                    fstringvalidator.Not(fstringvalidator.IsValidIP())\n                },\n            },\n</code></pre>"},{"location":"stringvalidator/oneofwithdescription/","title":"<code>OneOfWithDescription</code>","text":"<p>Released in v1.5.0</p> <p>This validator is used to check if the string is one of the given values and format the description and the markdown description.</p>"},{"location":"stringvalidator/oneofwithdescription/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\n    resp.Schema = schema.Schema{\n        (...)\n            \"interface_type\": schema.StringAttribute{\n                Optional:            true,\n                MarkdownDescription: \"Type of ...\",\n                Validators: []validator.String{\n                    fstringvalidator.OneOfWithDescription(\n                        fstringvalidator.OneOfWithDescriptionValues{\n                            Value:       \"VMXNET3\",\n                            Description: \"Vmware interface\",\n                        },\n                        fstringvalidator.OneOfWithDescriptionValues{\n                            Value:       \"E1000E\",\n                            Description: \"Intel interface\",\n                        },\n                    )\n                },\n            },\n</code></pre>"},{"location":"stringvalidator/oneofwithdescription/#description-and-markdown-description","title":"Description and Markdown description","text":""},{"location":"stringvalidator/oneofwithdescription/#description","title":"Description","text":"<p>Value must be one of: \"VMXNET3\" (Vmware interface), \"E1000E\" (Intel interface)</p>"},{"location":"stringvalidator/oneofwithdescription/#markdown-description","title":"Markdown description","text":"<p>Value must be one of:</p> <ul> <li><code>VMXNET3</code> (Vmware interface)</li> <li><code>E1000E</code> (Intel interface)</li> </ul>"},{"location":"stringvalidator/prefixcontains/","title":"<code>PrefixContains</code>","text":"<p>Released in v1.7.0</p> <p>This validator is used to check if the string contains prefix in the given value.</p>"},{"location":"stringvalidator/prefixcontains/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\n    resp.Schema = schema.Schema{\n        (...)\n            \"interface_type\": schema.StringAttribute{\n                Optional:            true,\n                MarkdownDescription: \"Type of ...\",\n                Validators: []validator.String{\n                    fstringvalidator.PrefixContains(\"urn:test:demo:\")\n                },\n            },\n</code></pre>"},{"location":"stringvalidator/prefixcontains/#description-and-markdown-description","title":"Description and Markdown description","text":"<ul> <li>Description: must start with \"urn:test:demo:\"</li> <li>Markdown description: This value must start with <code>urn:test:demo:</code>.</li> </ul>"}]}